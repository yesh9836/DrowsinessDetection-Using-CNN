# -*- coding: utf-8 -*-
"""Main.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1RoHj8t99Edjs59aaTJpEXo7cQ2ylzoU6
"""

from google.colab import drive
drive.mount('/content/drive')

"""## **Importing Necessary Libraries**

"""

import os
import glob
import shutil
import random
from tqdm import tqdm

raw_data ="C:\\Users\\Pranay kumar\\OneDrive\\Documents\\MRL eyedataset\\mrlEyes_2018_01"
closed_dst_dir ="C:\\Users\\Pranay kumar\\OneDrive\\Documents\\MRL eyedataset\\Prepared_data\\Closed"
open_dst_dir = "C:\\Users\\Pranay kumar\\OneDrive\\Documents\\MRL eyedataset\\Prepared_data\\Open"
os.makedirs(closed_dst_dir,exist_ok=True)
os.makedirs(open_dst_dir,exist_ok=True)
for dirpath, dirname, filename in os.walk(raw_data):
    for file in tqdm([f for f in filename if f.endswith('.png')]):
        if file.split('_')[4] == '0':
            shutil.copy(src=dirpath + '/' + file, dst= closed_dst_dir)
        elif file.split('_')[4] == '1':
            shutil.copy(src=dirpath + '/' + file, dst= open_dst_dir )

"""# **Splitting Raw Data into Open and Closed Sets**"""

def create_test_closed(source, destination, percent):
    '''
    divides closed eyes images into given percent and moves from
    source to destination.

    Arguments:
    source(path): path of source directory
    destination(path): path of destination directory
    percent(float): percent of data to be divided(range: 0 to 1)
    '''
    path, dirs, files_closed = next(os.walk(source))
    file_count_closed = len(files_closed)
    percentage = file_count_closed * percent
    to_move = random.sample(glob.glob(source + "/*.png"), int(percentage))

    for f in enumerate(to_move):
        if not os.path.exists(destination):
            os.makedirs(destination)
        shutil.move(f[1], destination)
    print(f'moved {int(percentage)} images to the destination successfully.')

def create_test_open(source, destination, percent):
    '''
    divides open eyes images into given percent and moves from
    source to destination.

    Arguments:
    source(path): path of source directory
    destination(path): path of destination directory
    percent(float): percent of data to be divided(range: 0 to 1)
    '''
    path, dirs, files_open = next(os.walk(source))
    file_count_open = len(files_open)
    percentage = file_count_open * percent
    to_move = random.sample(glob.glob(source + "/*.png"), int(percentage))

    for f in enumerate(to_move):
        if not os.path.exists(destination):
            os.makedirs(destination)
        shutil.move(f[1], destination)
    print(f'moved {int(percentage)} images to the destination successfully.')

create_test_closed("C:\\Users\\Pranay kumar\\OneDrive\\Documents\\MRL eyedataset\\Prepared_data\\Train\\Closed",
                    "C:\\Users\\Pranay kumar\\OneDrive\\Documents\\MRL eyedataset\\Prepared_data\\Test\\Closed",
                    0.2)

create_test_open("C:\\Users\\Pranay kumar\\OneDrive\\Documents\\MRL eyedataset\\Prepared_data\\Train\\Open",
                    "C:\\Users\\Pranay kumar\\OneDrive\\Documents\\MRL eyedataset\\Prepared_data\\Test\\Open",
                    0.2)

"""# **Data Augmentation**"""

import albumentations as A
import cv2
def augment(aug,image):
    """This function will apply the type of augmentation on both image
    returns augmented image
    """
    augmented = aug(image=image)
    return augmented['image']
def resize(image): #While agumenting the data we are converting all images into the size of (512,512)
    aug = A.Resize(height=24,width=24,p=1)
    return augment(aug,image)

dest_path1 = "C:\\Users\\Pranay kumar\\OneDrive\\Documents\\preprocessedtrainopen"
os.makedirs(dest_path1, exist_ok=True)

dataset_path = "C:\\Users\\Pranay kumar\\OneDrive\\Documents\\MRL eyedataset\\Prepared_data\\Train\\Open"

# List all image files in the dataset folder
image_files = [f for f in os.listdir(dataset_path)]
c=0
# Apply augmentations to each image in the dataset
for image_file in image_files:
    c=c+1
    # Load the image
    image_path = os.path.join(dataset_path, image_file)
    try :
        image = cv2.imread(image_path)
        blur = cv2.GaussianBlur(image,(5,5),0)
    except:
        continue
    # Apply augmentations
    resized_image = resize(blur)

    # Save the augmented images
    cv2.imwrite(os.path.join(dest_path1,image_file), resized_image)
print(c)

dest_path2 = "C:\\Users\\Pranay kumar\\OneDrive\\Documents\\preprocessedtrainclosed"
os.makedirs(dest_path2, exist_ok=True)

dataset_path = "C:\\Users\\Pranay kumar\\OneDrive\\Documents\\MRL eyedataset\\Prepared_data\\Train\\Closed"

# List all image files in the dataset folder
image_files = [f for f in os.listdir(dataset_path)]
c=0

# Apply augmentations to each image in the dataset
for image_file in image_files:
    c=c+1
    # Load the image
    image_path = os.path.join(dataset_path, image_file)
    image = cv2.imread(image_path)
    blur = cv2.GaussianBlur(image,(5,5),0)

    # Apply augmentations
    resized_image = resize(blur)

    # Save the augmented images
    cv2.imwrite(os.path.join(dest_path2 , image_file), resized_image)
print(c)

dest_path3 = "C:\\Users\\Pranay kumar\\OneDrive\\Documents\\preprocessedtestopen"
os.makedirs(dest_path3, exist_ok=True)

dataset_path = "C:\\Users\\Pranay kumar\\OneDrive\\Documents\\MRL eyedataset\\Prepared_data\\Test\\Open"

# List all image files in the dataset folder
image_files = [f for f in os.listdir(dataset_path)]
c=0
# Apply augmentations to each image in the dataset

for image_file in image_files:
    c=c+1
    # Load the image
    image_path = os.path.join(dataset_path, image_file)
    image = cv2.imread(image_path)
    blur = cv2.GaussianBlur(image,(5,5),0)

    # Apply augmentations
    resized_image = resize(blur)

    # Save the augmented images
    cv2.imwrite(os.path.join(dest_path3,image_file), resized_image)
print(c)

dest_path4 = "C:\\Users\\Pranay kumar\\OneDrive\\Documents\\preprocessedtestclosed"
os.makedirs(dest_path1, exist_ok=True)

dataset_path = "C:\\Users\\Pranay kumar\\OneDrive\\Documents\\MRL eyedataset\\Prepared_data\\Test\\Closed"
# List all image files in the dataset folder
image_files = [f for f in os.listdir(dataset_path)]
c=0
# Apply augmentations to each image in the dataset
for image_file in image_files:
    c=c+1
    # Load the image
    image_path = os.path.join(dataset_path, image_file)
    image = cv2.imread(image_path)
    blur = cv2.GaussianBlur(image,(5,5),0)

    # Apply augmentations
    resized_image = resize(blur)

    # Save the augmented images
    cv2.imwrite(os.path.join(dest_path4 , image_file), resized_image)
print(c)

import pandas as pd
import os
import cv2
from PIL import Image
from numpy import asarray
import numpy as np
from pygame import mixer

"""# **Splitting Data into Train and Test Sets**"""

#trainopenpreprocessed
X_train=[]
Y_train=[]
path1=r"/content/drive/MyDrive/Train/trainopenpreprocessed"
for image in os.listdir(path1):
    try:
        X_train.append(cv2.cvtColor(asarray(Image.open(os.path.join(path1,image))),cv2.COLOR_BGR2GRAY).flatten())
        Y_train.append(1)
    except:
        continue

#trainclosedpreprocessed

path2="/content/drive/MyDrive/Train/trainclosedpreprocessed"
for image in (os.listdir(path2)):
    try:
        X_train.append(cv2.cvtColor(asarray(Image.open(os.path.join(path2,image))),cv2.COLOR_BGR2GRAY).flatten())
        Y_train.append(0)
    except:
        continue

#testopenpreprocessed

X_test=[]
Y_test=[]
path3="/content/drive/MyDrive/Test/testopenpreprocessed"
for image in (os.listdir(path3)):
    X_test.append(cv2.cvtColor(asarray(Image.open(os.path.join(path3,image))),cv2.COLOR_BGR2GRAY).flatten())
    Y_test.append(1)

#testclosedpreprocessed

path4="/content/drive/MyDrive/Test/testclosedpreprocessed"
for image in (os.listdir(path4)):
    X_test.append(cv2.cvtColor(asarray(Image.open(os.path.join(path4,image))),cv2.COLOR_BGR2GRAY).flatten())
    Y_test.append(0)

"""# **Standardizing the size of all images.**"""

X_train=np.array(X_train)/225
Y_train=np.array(Y_train)
X_test=np.array(X_test)/225
Y_test=np.array(Y_test)

X_train=X_train.reshape(len(X_train),24,24,1)
Y_train=Y_train.reshape(len(Y_train),1)


X_test=X_test.reshape(len(X_test),24,24,1)
Y_test=Y_test.reshape(len(Y_test),1)

import tensorflow
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D,MaxPooling2D,Dense,Flatten

"""# **Loading the Sequential Model**"""

model = Sequential([
    Conv2D(32, (3,3), activation = 'relu', input_shape = (24,24,1)),
    MaxPooling2D((2,2)),

    Conv2D(32, (3,3), activation = 'relu'),
    MaxPooling2D((2,2)),

    Flatten(),
    Dense(64, activation = 'relu'),
    Dense(1, activation = 'sigmoid')
])

model.compile(loss='binary_crossentropy', optimizer='adam',metrics=['accuracy'])
model.fit(X_train,Y_train,epochs=2,batch_size=50)

print(len(X_train))

print(len(X_test))
print(len(Y_train))
print(len(Y_test))

"""# **Model Evaluation**

"""

model.evaluate(X_test,Y_test, batch_size=2)

import matplotlib.pyplot as plt
import random
i=6016
y_pred=model.predict(X_train[i,:].reshape(1,24,24,1))
plt.imshow(X_train[i,:])
plt.show()
y_acc=Y_train[i,:]
print(y_pred)
print(y_acc)

pip install opencv-python

"""# **Recording a video to be split into consecutive image frames for the purpose of Detecting Drowsiness**"""

mixer.init()
sound = mixer.Sound("C:\\Users\\Pranay kumar\\Downloads\\danger.wav")
face = cv2.CascadeClassifier("C:\\Users\\Pranay kumar\\Downloads\\haarcascade_frontalface_default.xml")
leye = cv2.CascadeClassifier("C:\\Users\\Pranay kumar\\Downloads\\haarcascade_lefteye_2splits.xml")
reye = cv2.CascadeClassifier("C:\\Users\\Pranay kumar\\Downloads\\haarcascade_righteye_2splits.xml")
lbl=['Close','Open']
#model = load_model("C:/Users/saiye/Downloads/cnnCat2.h5")
path = os.getcwd()
cap = cv2.VideoCapture(0)
if not cap.isOpened():
    print("Error: Could not open camera.")
    exit()

font = cv2.FONT_HERSHEY_COMPLEX_SMALL
t=2
p=2
count=0
score=0
thicc=2
rpred=[99]
lpred=[99]
while(True):
    ret, frame = cap.read()
    if not ret:
        break
    height,width = frame.shape[:2]
    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
    faces = face.detectMultiScale(gray,minNeighbors=5,scaleFactor=1.1,minSize=(25,25))
    left_eye = leye.detectMultiScale(gray)
    right_eye = reye.detectMultiScale(gray)
    cv2.rectangle(frame, (0,height-50) , (200,height) , (0,0,0) , thickness=cv2.FILLED )
    for (x,y,w,h) in faces:
        cv2.rectangle(frame, (x,y) , (x+w,y+h) , (100,100,100) , 1 )
    for (x,y,w,h) in right_eye:
        r_eye=frame[y:y+h,x:x+w]
        count=count+1
        r_eye = cv2.cvtColor(r_eye,cv2.COLOR_BGR2GRAY)
        r_eye = cv2.resize(r_eye,(24,24))
        r_eye= r_eye/255
        r_eye= r_eye.reshape(1,24,24,1)
        rpred = model.predict(r_eye)
        if(rpred[0][0]>0.5):
            lbl="open"
            t=1
        else:
            lbl="closed"
            t=0

        break
    for (x,y,w,h) in left_eye:
        l_eye=frame[y:y+h,x:x+w]
        count=count+1
        l_eye = cv2.cvtColor(l_eye,cv2.COLOR_BGR2GRAY)
        l_eye = cv2.resize(l_eye,(24,24))
        l_eye= l_eye/255
        l_eye=l_eye.reshape(1,24,24,1)
        lpred = model.predict(l_eye)
        if(lpred[0][0]>0.5):
            lbl='open'
            p=1
        else:
            lbl='Closed'
            p=0
        break
    if(t==0 or p==0):
        score=score+1
        cv2.putText(frame,"Closed",(10,height-20), font, 1,(255,255,255),1,cv2.LINE_AA)

    else:
        score=score-2
        cv2.putText(frame,"Open",(10,height-20), font, 1,(255,255,255),1,cv2.LINE_AA)
    if(score<0):
        score=0
    cv2.putText(frame,'Score:'+str(score),(100,height-20), font, 1,(255,255,255),1,cv2.LINE_AA)
    if(score>8):
        #person is feeling sleepy so we beep the alarm
        cv2.imwrite(os.path.join(path,'image.jpg'),frame)
        try:
            sound.play()
        except: # isplaying = False
            pass
        if(thicc<16):
            thicc= thicc+2
        else:
            thicc=thicc-2
            if(thicc<2):
                thicc=2
        cv2.rectangle(frame,(0,0),(width,height),(0,0,255),thicc)
    cv2.imshow('frame',frame)
    if cv2.waitKey(0) & 0xFF == ord('q'):
        break
#cap.release()
#cv2.destroyAllWindows()